# kng added in container
# kng added in my folder
# Wazuh - Logstash configuration file
## Remote Wazuh Manager - Filebeat input
input {
    beats {
        port => 5000
        codec => "json_lines"
#       ssl => true
#       ssl_certificate => "/etc/logstash/logstash.crt"
#       ssl_key => "/etc/logstash/logstash.key"
        type => "wazuh-alerts"
        tags => ["wazuh-al"] 
    }
  beats {
    port => 5045
     type => "metricbeat-info"
     tags => ["meticbeat-i"] 
 }
  udp {
    port => 6514
    type => "ewp-syslog"
    tags => ["ewp-sysloginfo"] 
     }

  udp {
    port => 7514
    type => "ewp-auto"
    tags => ["ewp-autoinfo"] 
     }

  udp {
    port => 7516
    type => "vuln-scan"
    tags => ["vuln-scaninfo"] 
     }

http_poller {
urls => {
   myresource => "http://211.252.84.52:3443/feeds/inboundfeedhc"
   }
    request_timeout => 60
#    interval => 300

    schedule => {every => "12h"  }
#    schedule => {every => "300s"  }
#        #    codec => "plain"

    codec => multiline {
         pattern => "\n"
          what => "next"
          }
    tags => ["minemeld"]
  }

}

filter {
 if [type] == "wazuh-alerts" {
    if [data][srcip] {
        mutate {
            add_field => [ "@src_ip", "%{[data][srcip]}" ]
        }
    }
    if [data][aws][sourceIPAddress] {
        mutate {
            add_field => [ "@src_ip", "%{[data][aws][sourceIPAddress]}" ]
        }
    }
 }
}
                                                                                                                                                                                                                                                                                                                                                      
filter {
 if [type] == "wazuh-alerts" {
    geoip {
        source => "@src_ip"
        target => "GeoLocation"
        fields => ["city_name", "continent_code", "country_code2", "country_name", "region_name", "location"]
    }
    date {
        match => ["timestamp", "ISO8601"]
        target => "@timestamp"
    }
    mutate {
        remove_field => [ "timestamp", "beat", "input_type", "tags", "count", "@version", "log", "offset", "type","@src_ip"]
    }
  }
}


# Filtering for SSH logins either failed or successful
 filter {
  if [type] == "ewp-syslog" {
       #if [syslog_program] == "sshd" {
     if "sshd" in [message] {
      if "Failed password" in [message] {
         grok {
          break_on_match => false
             match => [
                   "message", "invalid user %{DATA:UserName} from %{IP:src_ip}",
                     "message", "for %{DATA:UserName} from %{IP:src_ip}" ]
                       }
             mutate {
                     add_tag => [ "SSH_Failed_Login" ]
                              }
               }
  if "Accepted password" in [message] {
               grok {
                   match => [
                     "message", "for %{DATA:UserName} from %{IP:src_ip}" ]
                     }
                mutate {
                  add_tag => [ "SSH_Successful_Login" ]
                       }
                          }
         if "Too many authentication failures for invalid user" in [message] {
                    grok {
                       match => [
                         "message", "for invalid user %{DATA:UserName} from %{IP:src_ip}" ]
                          }
                    mutate {
                              add_tag => [ "SSH_BruteForce_Attempt" ]
                           }
                }
        else if "Too many authentication failures for" in [message] {
            grok {
                   match => [
                       "message", "for %{DATA:UserName} from %{IP:src_ip}" ]
                 }
             mutate {
                 add_tag => [ "SSH_Erronous_Password" ]
                    }
             }
           }
        }
    }

filter {
  if [type] == "vuln-scan" {
if "Success notification of VA Engine" in [message] {
grok {
match => ["message", "%{SYSLOGTIMESTAMP} %{HOSTNAME:hostname} %{GREEDYDATA}, \[%{GREEDYDATA} \#%{INT}\]  %{LOGLEVEL:ruby_loglevel} \-\- \: \#\<VaEngineHandler:%{BASE16FLOAT}\> %{WORD:SuccessMessage} notification of VA Engine\: VaProcessID\: %{UUID}, ServerUUID\: %{DATA:scanned_server_uuid}, ServerIP\: %{IP:scanned_server_ip}"]
}
mutate {
add_tag => [ "Successful_VM_Scanning" ]
}
} else if "create_vuln" in [message] {
grok {
match => ["message", "%{SYSLOGTIMESTAMP} %{HOSTNAME:hostname} %{GREEDYDATA}, \[%{GREEDYDATA} \#%{INT}\]  %{LOGLEVEL:ruby_loglevel} \-\- \: create_vuln\: {\"id\"=>\"%{UUID:report_uuid}\", \"name\"=>\"%{DATA:vuln_name}\", %{GREEDYDATA}, \"host\"=>\"%{IP:vuln_host}\", \"port\"=>\"%{DATA:vuln_port}\", \"nvt\"=>{%{GREEDYDATA:vuln_nvt}}, \"scan_nvt_version\"=>\"%{DATA:vuln_scan_nvt_version}\", \"threat\"=>\"%{WORD:vuln_threat}\", \"severity\"=>\"%{NUMBER:vuln_severity}\", \"qod\"=>{\"value\"=>\"%{INT:vuln_qod_percent}\", \"type\"=>(\"%{WORD:vuln_qod_type}\"|%{DATA})}, \"description\"=>\"%{DATA:vuln_desc}\"}"]
}
mutate {
add_tag => [ "Detected_Vuln" ]
}
if [vuln_nvt] =~ /\"oid\"\=\>/ {
grok {
match => ["vuln_nvt", "\"oid\"=>\"%{DATA:vuln_nvt_oid}\""]
}
}
if [vuln_nvt] =~/\"name\"\=\>/ {
grok {
match => ["vuln_nvt", "\"name\"=>\"%{DATA:vuln_nvt_name}\""]
}
}
if [vuln_nvt] =~/\"family\"\=\>/ {
grok {
match => ["vuln_nvt", "\"family\"=>\"%{DATA:vuln_nvt_family}\""]
}
}
if [vuln_nvt] =~/\"cvss_base\"\=\>/ {
grok {
match => ["vuln_nvt", "\"cvss_base\"=>\"%{DATA:vuln_nvt_cvss_base}\""]
}
}
if [vuln_nvt] =~/\"cve\"\=\>/ {
grok {
match => ["vuln_nvt", "\"cve\"=>\"%{DATA:vuln_nvt_cve}\""]
}
}
if [vuln_nvt] =~/\"bid\"\=\>/ {
grok {
match => ["vuln_nvt", "\"bid\"=>\"%{DATA:vuln_nvt_bid}\""]
}
}
if [vuln_nvt] =~/\"tags\"\=\>/ {
grok {
match => ["vuln_nvt", "\"tags\"=>\"%{DATA:vuln_nvt_tags}\""]
}
if [vuln_nvt_tags] =~ /cvss_base_vector\=/ {
grok {
patterns_dir => ["/usr/share/logstash/data/queue"]
match => ["vuln_nvt_tags", "cvss_base_vector\=%{TAG_DATA:vuln_nvt_tag_cvss_base_vector}"]
}
}
if [vuln_nvt_tags] =~ /qod_type\=/ {
grok {
  patterns_dir => ["/usr/share/logstash/data/queue"]
  match => ["vuln_nvt_tags", "qod_type\=%{TAG_DATA:vuln_nvt_tag_qod_type}"]
}
}
if [vuln_nvt_tags] =~ /summary\=/ {
grok {
patterns_dir => ["/usr/share/logstash/data/queue"]
match => ["vuln_nvt_tags", "summary\=%{TAG_DATA:vuln_nvt_tag_summary}"]
}
}
if [vuln_nvt_tags] =~ /solution_type\=/ {
grok {
patterns_dir => ["/usr/share/logstash/data/queue"]
match => ["vuln_nvt_tags", "solution_type\=%{TAG_DATA:vuln_nvt_tag_solution_type}"]
}
}
}
}
   }
}



filter {
  if "minemeld" in [tags] {
   grok {
      match =>
            { "message" => "\A%{IP:from}-%{IP:to}" }
              }
   }
}



output {
  # if [type] == "ewp-syslog" {
  if "ewp-sysloginfo" in [tags] {
  		elasticsearch {
    		hosts => [ "elasticsearch:9200" ]
                manage_template => false
    		index => "syslog-ewp-%{+YYYY.MM}"
                document_type => "ewp-sys"
 	}
   }
  else if "ewp-autoinfo" in [tags]  {
                elasticsearch {
                hosts => [ "elasticsearch:9200" ]
                manage_template => false
                index => "auto-discovery-ewp-%{+YYYY.MM}"
                document_type => "ewp-sys" 
                    }
            }
  else if "vuln-scaninfo" in [tags]  {
                elasticsearch {
                hosts => [ "elasticsearch:9200" ]
                manage_template => false
                index => "vuln-scan-ewp-%{+YYYY.MM}"
                document_type => "ewp-scan" 
                    }
  }
  else if "minemeld" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "minemeld-http-%{+YYYY.MM.dd}"
      manage_template => false
      document_type => "minemeld"
    }
  }
else
 {

 if [@metadata][beat] == "metricbeat"
  {
    elasticsearch {
    hosts => ["elasticsearch:9200"]
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
 }

# else if [@metadata][beat] == "filebeat"
# {
#    elasticsearch {
#        hosts => ["elasticsearch:9200"]
#        index => "wazuh-alerts-3.x-%{+YYYY.MM.dd}"
#        document_type => "wazuh"
#    }
# }
   else
   {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "wazuh-alerts-3.x-%{+YYYY.MM.dd}"
        document_type => "wazuh"
           }
  }
 }

}
